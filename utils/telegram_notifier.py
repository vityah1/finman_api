import os
import asyncio
import aiohttp
import logging
from typing import Optional

logger = logging.getLogger(__name__)

class TelegramNotifier:
    """
    –°–µ—Ä–≤—ñ—Å –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏ –≤ Telegram –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
    """
    
    def __init__(self):
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN', '461986981:AAGHyTw5Na_o_9ln1GXjPV5zhwU6mR52Svc')
        self.admin_chat_id = os.getenv('TELEGRAM_ADMIN_CHAT_ID', '190722186')
        self.enabled = bool(self.bot_token)
        
        if not self.enabled:
            logger.warning("TELEGRAM_BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ environment variables. Telegram –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω—ñ.")
        else:
            logger.info(f"Telegram –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω—ñ. –ß–∞—Ç –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {self.admin_chat_id}")
    
    def get_user_info(self, user_id: int) -> dict:
        """
        –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–Ω—è –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
        """
        try:
            from fastapi_sqlalchemy import db
            from sqlalchemy import text

            result = db.session.execute(
                text("SELECT id, login, email, fullname FROM users WHERE id = :user_id"),
                {"user_id": user_id}
            ).fetchone()
            
            if result:
                return {
                    'id': result[0],
                    'login': result[1],
                    'email': result[2],
                    'fullname': result[3]
                }
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}")
            
        return {'id': user_id, 'login': '–Ω–µ–≤—ñ–¥–æ–º–æ', 'email': None, 'fullname': None}
    
    async def send_message(self, chat_id: str, message: str) -> bool:
        """
        –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram
        """
        if not self.enabled:
            return False
            
        try:
            url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
            
            # –û–±—Ä—ñ–∑–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫—â–æ –≤–æ–Ω–æ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ (Telegram –ª—ñ–º—ñ—Ç 4096 —Å–∏–º–≤–æ–ª—ñ–≤)
            if len(message) > 4000:
                message = message[:3950] + "...\n\n[–ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø –û–ë–†–Ü–ó–ê–ù–û]"
            
            payload = {
                'chat_id': chat_id,
                'text': message,
                'parse_mode': 'HTML'
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=payload) as response:
                    if response.status == 200:
                        logger.info(f"Telegram –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                        return True
                    else:
                        response_text = await response.text()
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ Telegram –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {response.status} - {response_text}")
                        return False
                        
        except Exception as e:
            logger.error(f"–í–∏–Ω—è—Ç–∞–∫ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ Telegram –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
            return False
    
    def send_error_notification(self, user_id: Optional[int], error_details: dict):
        """
        –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –≤–µ—Ä—Å—ñ—è)
        """
        if not self.enabled:
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫—â–æ —î
        user_info = None
        if user_id:
            user_info = self.get_user_info(user_id)
        
        message = self._format_error_message(error_details, user_info)
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –≤ event loop
        try:
            loop = asyncio.get_event_loop()
            loop.create_task(self.send_message(self.admin_chat_id, message))
        except RuntimeError:
            # –Ø–∫—â–æ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ event loop, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π
            asyncio.run(self.send_message(self.admin_chat_id, message))
    
    def _format_error_message(self, error_details: dict, user_info: Optional[dict] = None) -> str:
        """
        –§–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
        """
        message = "üö® <b>–ü–æ–º–∏–ª–∫–∞ –≤ FinMan API</b>\n\n"
        
        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if user_info:
            message += f"<b>üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:</b>\n"
            message += f"ID: {user_info['id']}\n"
            message += f"–õ–æ–≥—ñ–Ω: {user_info['login']}\n"
            if user_info.get('fullname'):
                message += f"–Ü–º'—è: {user_info['fullname']}\n"
            if user_info.get('email'):
                message += f"Email: {user_info['email']}\n"
            message += "\n"
        
        if error_details.get('url'):
            message += f"<b>üåê URL:</b> {error_details['url']}\n"
        
        if error_details.get('method'):
            message += f"<b>üì° –ú–µ—Ç–æ–¥:</b> {error_details['method']}\n"
        
        if error_details.get('error_type'):
            message += f"<b>‚ö†Ô∏è –¢–∏–ø –ø–æ–º–∏–ª–∫–∏:</b> {error_details['error_type']}\n"
        
        if error_details.get('error_message'):
            message += f"<b>üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b> {error_details['error_message']}\n\n"
        
        if error_details.get('traceback'):
            # –°–∫–æ—Ä–æ—á—É—î–º–æ traceback –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ
            traceback_lines = error_details['traceback'].split('\n')
            if len(traceback_lines) > 20:
                traceback_short = '\n'.join(traceback_lines[-20:])  # –û—Å—Ç–∞–Ω–Ω—ñ 20 —Ä—è–¥–∫—ñ–≤
                message += f"<b>üìã Traceback (–æ—Å—Ç–∞–Ω–Ω—ñ —Ä—è–¥–∫–∏):</b>\n<pre>{traceback_short}</pre>"
            else:
                message += f"<b>üìã Traceback:</b>\n<pre>{error_details['traceback']}</pre>"
        
        message += f"\n<i>üïê –ß–∞—Å: {error_details.get('timestamp', '–Ω–µ–≤—ñ–¥–æ–º–æ')}</i>"
        
        return message

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä
telegram_notifier = TelegramNotifier()